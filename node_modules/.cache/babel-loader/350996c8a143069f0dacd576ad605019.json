{"ast":null,"code":"import React from 'react';\nimport getContactUsErrorList from 'data/ContactUs-ErrorList';\nimport TextInputLcc from 'views/components/inputs/TextInputLcc';\nimport MultiCheckboxInputLcc from 'views/components/inputs/MultiCheckboxInputLcc';\nimport RadioInputLcc from 'views/components/inputs/RadioInputLcc';\nimport TextareaInputLcc from 'views/components/inputs/TextareaInputLcc';\nimport DateInputLcc from 'views/components/inputs/DateInputLcc';\nimport TimeInputLcc from 'views/components/inputs/TimeInputLcc';\nimport FileUploadInputLcc from 'views/components/inputs/FileUploadInputLcc';\nimport DropdownInputLcc from 'views/components/inputs/DropdownInputLcc';\nimport CheckboxInputLcc from 'views/components/inputs/CheckboxInputLcc';\nimport ErrorSummaryLcc from 'views/components/ErrorSummaryLcc'; //NOT USING - Will be dynamic\n\nexport default class Name extends React.Component {//state = {\n  //    errors: []\n  //}\n  //validateForm = () => {\n  //    let errors = []\n  //    let formIsValid = true\n  //    //Will be a lambda\n  //    let contactUsErrorList = getContactUsErrorList();\n  //    formIsValid = contactUsErrorList.errorList.length > 0 ? false : true;\n  //    errors = contactUsErrorList.errorList;\n  //    this.setState({ errors })\n  //    return formIsValid\n  //}\n  ////This won't be here, just for dev purposes - will be on submit\n  //onCheckErrors = event => {\n  //    //event.preventDefault();\n  //    if (this.validateForm()) {\n  //        console.log(\"valid\", this.state.errors);\n  //    }\n  //    else {\n  //        console.log(\"invalid\", this.state.errors);\n  //    }\n  //}; \n  //render() {\n  //    let contactUsNameFormView = getContactUsNameFormView(); //Will be call to lambda\n  //    let qnCount = contactUsNameFormView.questions.length;\n  //    const components = {\n  //        CheckboxInputLcc: CheckboxInputLcc,\n  //        TextInputLcc: TextInputLcc,\n  //        MultiCheckboxInputLcc: MultiCheckboxInputLcc,\n  //        RadioInputLcc: RadioInputLcc,\n  //        TextareaInputLcc: TextareaInputLcc,\n  //        DateInputLcc: DateInputLcc,\n  //        TimeInputLcc: TimeInputLcc,\n  //        FileUploadInputLcc: FileUploadInputLcc,\n  //        DropdownInputLcc: DropdownInputLcc\n  //    };\n  //    return (\n  //        <>\n  //            {qnCount > 1 || contactUsNameFormView.questions[0].componentType === \"CheckboxInputLcc\"\n  //                ? <h1 className=\"heading-large\">{contactUsNameFormView.displayName}</h1>\n  //                : null}\n  //            {(contactUsNameFormView.errorSummaryTitle && this.state.errors.length > 0)\n  //                ? <ErrorSummaryLcc errorSummaryTitle={contactUsNameFormView.errorSummaryTitle} errorSummaryHint={contactUsNameFormView.errorSummaryHint} errors={this.state.errors} />\n  //                : null}\n  //            {contactUsNameFormView.questions.map((question) => {\n  //                const ComponentType = components[question.componentType];\n  //                let componentErrors = [];\n  //                let thisQuestionsErrors = this.state.errors.filter(e => e.id === question.id);\n  //                if (thisQuestionsErrors.length > 0) {\n  //                    componentErrors = thisQuestionsErrors[0].errors;\n  //                }\n  //                return (\n  //                    <div className={`form-group ${componentErrors.length > 0 ? \"form-group-error\" : \"\"}`}>\n  //                        <ComponentType key={question.id} qnData={question} qnCount={qnCount} errors={componentErrors} />\n  //                    </div>\n  //                );\n  //            })\n  //            }\n  //            <div>\n  //                <button className=\"btn btn-primary btn-small\" id=\"TestErrors\" onClick={this.onCheckErrors}> Check errors (for now) </button>\n  //            </div>\n  //        </>\n  //    );\n  //}\n}","map":{"version":3,"names":["React","getContactUsErrorList","TextInputLcc","MultiCheckboxInputLcc","RadioInputLcc","TextareaInputLcc","DateInputLcc","TimeInputLcc","FileUploadInputLcc","DropdownInputLcc","CheckboxInputLcc","ErrorSummaryLcc","Name","Component"],"sources":["C:/Users/nmcca/source/repos/AWS.eForms/AWS.eForms.ReactApp/src/forms/ContactUsPathways/Name.js"],"sourcesContent":["import React from 'react';\r\nimport getContactUsErrorList from 'data/ContactUs-ErrorList';\r\nimport TextInputLcc from 'views/components/inputs/TextInputLcc';\r\nimport MultiCheckboxInputLcc from 'views/components/inputs/MultiCheckboxInputLcc';\r\nimport RadioInputLcc from 'views/components/inputs/RadioInputLcc';\r\nimport TextareaInputLcc from 'views/components/inputs/TextareaInputLcc';\r\nimport DateInputLcc from 'views/components/inputs/DateInputLcc';\r\nimport TimeInputLcc from 'views/components/inputs/TimeInputLcc';\r\nimport FileUploadInputLcc from 'views/components/inputs/FileUploadInputLcc';\r\nimport DropdownInputLcc from 'views/components/inputs/DropdownInputLcc';\r\nimport CheckboxInputLcc from 'views/components/inputs/CheckboxInputLcc';\r\nimport ErrorSummaryLcc from 'views/components/ErrorSummaryLcc';\r\n\r\n//NOT USING - Will be dynamic\r\nexport default class Name extends React.Component {\r\n\r\n    //state = {\r\n    //    errors: []\r\n    //}\r\n\r\n    //validateForm = () => {\r\n    //    let errors = []\r\n    //    let formIsValid = true\r\n\r\n    //    //Will be a lambda\r\n    //    let contactUsErrorList = getContactUsErrorList();\r\n\r\n    //    formIsValid = contactUsErrorList.errorList.length > 0 ? false : true;\r\n    //    errors = contactUsErrorList.errorList;\r\n\r\n    //    this.setState({ errors })\r\n\r\n    //    return formIsValid\r\n    //}\r\n    ////This won't be here, just for dev purposes - will be on submit\r\n    //onCheckErrors = event => {\r\n    //    //event.preventDefault();\r\n    //    if (this.validateForm()) {\r\n    //        console.log(\"valid\", this.state.errors);\r\n    //    }\r\n    //    else {\r\n    //        console.log(\"invalid\", this.state.errors);\r\n    //    }\r\n        \r\n    //}; \r\n    //render() {\r\n    //    let contactUsNameFormView = getContactUsNameFormView(); //Will be call to lambda\r\n    //    let qnCount = contactUsNameFormView.questions.length;\r\n\r\n    //    const components = {\r\n    //        CheckboxInputLcc: CheckboxInputLcc,\r\n    //        TextInputLcc: TextInputLcc,\r\n    //        MultiCheckboxInputLcc: MultiCheckboxInputLcc,\r\n    //        RadioInputLcc: RadioInputLcc,\r\n    //        TextareaInputLcc: TextareaInputLcc,\r\n    //        DateInputLcc: DateInputLcc,\r\n    //        TimeInputLcc: TimeInputLcc,\r\n    //        FileUploadInputLcc: FileUploadInputLcc,\r\n    //        DropdownInputLcc: DropdownInputLcc\r\n    //    };\r\n\r\n    //    return (\r\n    //        <>\r\n    //            {qnCount > 1 || contactUsNameFormView.questions[0].componentType === \"CheckboxInputLcc\"\r\n    //                ? <h1 className=\"heading-large\">{contactUsNameFormView.displayName}</h1>\r\n    //                : null}\r\n    //            {(contactUsNameFormView.errorSummaryTitle && this.state.errors.length > 0)\r\n    //                ? <ErrorSummaryLcc errorSummaryTitle={contactUsNameFormView.errorSummaryTitle} errorSummaryHint={contactUsNameFormView.errorSummaryHint} errors={this.state.errors} />\r\n    //                : null}\r\n    //            {contactUsNameFormView.questions.map((question) => {\r\n    //                const ComponentType = components[question.componentType];\r\n    //                let componentErrors = [];\r\n    //                let thisQuestionsErrors = this.state.errors.filter(e => e.id === question.id);\r\n    //                if (thisQuestionsErrors.length > 0) {\r\n    //                    componentErrors = thisQuestionsErrors[0].errors;\r\n    //                }\r\n    //                return (\r\n    //                    <div className={`form-group ${componentErrors.length > 0 ? \"form-group-error\" : \"\"}`}>\r\n    //                        <ComponentType key={question.id} qnData={question} qnCount={qnCount} errors={componentErrors} />\r\n    //                    </div>\r\n    //                );\r\n    //            })\r\n    //            }\r\n    //            <div>\r\n    //                <button className=\"btn btn-primary btn-small\" id=\"TestErrors\" onClick={this.onCheckErrors}> Check errors (for now) </button>\r\n    //            </div>\r\n    //        </>\r\n    //    );\r\n    //}\r\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,eAAP,MAA4B,kCAA5B,C,CAEA;;AACA,eAAe,MAAMC,IAAN,SAAmBZ,KAAK,CAACa,SAAzB,CAAmC,CAE9C;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AA1E8C"},"metadata":{},"sourceType":"module"}