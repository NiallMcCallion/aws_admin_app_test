{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmcca\\\\source\\\\repos\\\\AWS.eForms\\\\AWS.eForms.ReactApp\\\\src\\\\views\\\\formLayout\\\\PageBaseTest.js\";\nimport React, { Fragment } from 'react';\nimport withRouterHooks from \"helpers/withRouterHooks\";\nimport { Navigate } from \"react-router-dom\";\nimport Description from 'views/shared/Description';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass PageBase extends React.Component {\n  render() {\n    let formJson = require(\"../../forms/\" + this.props.params.form + \"/Config.json\");\n\n    let category = formJson.categories.find(category => category.name == this.props.params.page);\n\n    if (category === undefined) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/ErrorNotFound\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 14\n      }, this);\n    }\n\n    return (\n      /*#__PURE__*/\n\n      /**\r\n       * Change questions to sections?\r\n       * Non question sections:\r\n       * - text/body/paragraph (note an input can also be Text)\r\n       * - headings/subheadings?\r\n       *\r\n       * Idea could be to store all text strings in the config as well,\r\n       * but would then need to be able to loop through those just like questions and not get too complex\r\n       */\n      _jsxDEV(_Fragment, {\n        children: category.questions.map(question => {\n          switch (question.type) {\n            case \"Description\":\n              return /*#__PURE__*/_jsxDEV(Description, {\n                header: question.header,\n                body: question.body\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 19\n              }, this);\n\n            case \"Text\":\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label\",\n                  children: question.friendlyName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-control\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 21\n                }, this)]\n              }, question.name, true, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 19\n              }, this);\n\n            default:\n              break;\n          }\n        })\n      }, void 0, false)\n    );\n  }\n\n}\n\nexport default _c = withRouterHooks(PageBase);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Fragment","withRouterHooks","Navigate","Description","PageBase","Component","render","formJson","require","props","params","form","category","categories","find","name","page","undefined","questions","map","question","type","header","body","friendlyName"],"sources":["C:/Users/nmcca/source/repos/AWS.eForms/AWS.eForms.ReactApp/src/views/formLayout/PageBaseTest.js"],"sourcesContent":["import React, { Fragment } from 'react';\r\nimport withRouterHooks from \"helpers/withRouterHooks\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport Description from 'views/shared/Description';\r\n\r\nclass PageBase extends React.Component {\r\n\r\n  render() {\r\n    let formJson = require(\"../../forms/\" + this.props.params.form + \"/Config.json\");\r\n    let category = formJson.categories.find(category => category.name == this.props.params.page);\r\n\r\n    if (category === undefined) {\r\n      return <Navigate to=\"/ErrorNotFound\" />;\r\n    }\r\n\r\n    return (\r\n      /**\r\n       * Change questions to sections?\r\n       * Non question sections:\r\n       * - text/body/paragraph (note an input can also be Text)\r\n       * - headings/subheadings?\r\n       *\r\n       * Idea could be to store all text strings in the config as well,\r\n       * but would then need to be able to loop through those just like questions and not get too complex\r\n       */\r\n      <>\r\n        {\r\n          category.questions.map((question) => {\r\n            switch (question.type) {\r\n              case \"Description\":\r\n                return (\r\n                  <Description header={question.header} body={question.body} />\r\n                );\r\n\r\n              case \"Text\":\r\n                return (\r\n                  <Fragment key={question.name}>\r\n                    <label className='form-label'>{question.friendlyName}</label>\r\n                    <input className='form-control'></input>\r\n                  </Fragment>\r\n                );\r\n\r\n              default:\r\n                break;\r\n            }\r\n          })}\r\n      </>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withRouterHooks(PageBase);"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;EAErCC,MAAM,GAAG;IACP,IAAIC,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAnC,GAA0C,cAA3C,CAAtB;;IACA,IAAIC,QAAQ,GAAGL,QAAQ,CAACM,UAAT,CAAoBC,IAApB,CAAyBF,QAAQ,IAAIA,QAAQ,CAACG,IAAT,IAAiB,KAAKN,KAAL,CAAWC,MAAX,CAAkBM,IAAxE,CAAf;;IAEA,IAAIJ,QAAQ,KAAKK,SAAjB,EAA4B;MAC1B,oBAAO,QAAC,QAAD;QAAU,EAAE,EAAC;MAAb;QAAA;QAAA;QAAA;MAAA,QAAP;IACD;;IAED;MAAA;;MACE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM;QAAA,UAEIL,QAAQ,CAACM,SAAT,CAAmBC,GAAnB,CAAwBC,QAAD,IAAc;UACnC,QAAQA,QAAQ,CAACC,IAAjB;YACE,KAAK,aAAL;cACE,oBACE,QAAC,WAAD;gBAAa,MAAM,EAAED,QAAQ,CAACE,MAA9B;gBAAsC,IAAI,EAAEF,QAAQ,CAACG;cAArD;gBAAA;gBAAA;gBAAA;cAAA,QADF;;YAIF,KAAK,MAAL;cACE,oBACE,QAAC,QAAD;gBAAA,wBACE;kBAAO,SAAS,EAAC,YAAjB;kBAAA,UAA+BH,QAAQ,CAACI;gBAAxC;kBAAA;kBAAA;kBAAA;gBAAA,QADF,eAEE;kBAAO,SAAS,EAAC;gBAAjB;kBAAA;kBAAA;kBAAA;gBAAA,QAFF;cAAA,GAAeJ,QAAQ,CAACL,IAAxB;gBAAA;gBAAA;gBAAA;cAAA,QADF;;YAOF;cACE;UAfJ;QAiBD,CAlBD;MAFJ;IAVF;EAkCD;;AA5CoC;;AAgDvC,oBAAed,eAAe,CAACG,QAAD,CAA9B"},"metadata":{},"sourceType":"module"}